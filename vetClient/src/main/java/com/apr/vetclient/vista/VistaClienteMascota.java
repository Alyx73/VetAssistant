/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.apr.vetclient.vista;

import com.apr.vetclient.modelo.dao.ClienteDAO;
import com.apr.vetclient.modelo.dao.MascotaDAO;
import com.apr.vetclient.modelo.vo.Cliente;
import com.apr.vetclient.modelo.vo.Mascota;
import com.apr.vetclient.modelo.vo.Usuario;
import com.apr.vetclient.util.Idioma;
import java.awt.Color;
import java.awt.Component;
import java.io.IOException;
import java.net.ConnectException;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Alex
 */
public class VistaClienteMascota extends JFrame {
    
    private JFrame ventanaAnterior;
    private Idioma i;  // Preferencia de idioma para textos
    private List<Mascota> mascotas = new ArrayList<>();   // Creo esta lista global para reutilizar los objetos de la tabla y rellenar los campos de mascota
    private DefaultTableModel modeloTabla = new DefaultTableModel();
    private ClienteDAO clienteDAO = new ClienteDAO();
    private MascotaDAO mascotaDAO = new MascotaDAO();
    
    public VistaClienteMascota(JFrame ventanaAnterior, Usuario usuario) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.ventanaAnterior = ventanaAnterior;
        this.i = new Idioma(usuario.getIdioma());
        modeloTabla = (DefaultTableModel) tablaMascotas.getModel();
        modeloTabla.setRowCount(0);
        cargarTextos(usuario.getIdioma());
        lblSinMascotas.setVisible(false);
        switch (usuario.getRol()) {      
            case "RECEPCIONISTA":                   // Dejo el switch por posibles nuevos roles o funciones en la app.
                btnConsulta.setEnabled(false);    // con varios roles es más visual el switch
                break;
        }
        txtDni.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCliente = new javax.swing.JLabel();
        lblMascota = new javax.swing.JLabel();
        lblDni = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        lblNombreCliente = new javax.swing.JLabel();
        txtNombreCliente = new javax.swing.JTextField();
        lblApellidos = new javax.swing.JLabel();
        txtApellidos = new javax.swing.JTextField();
        lblTfno = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMascotas = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        taHistorial = new javax.swing.JTextArea();
        btnAltaCliente = new javax.swing.JButton();
        btnModificarCliente = new javax.swing.JButton();
        btnEliminarCliente = new javax.swing.JButton();
        lblMascotasCliente = new javax.swing.JLabel();
        lblNombreMascota = new javax.swing.JLabel();
        txtNombreMascota = new javax.swing.JTextField();
        lblEspecie = new javax.swing.JLabel();
        txtEspecie = new javax.swing.JTextField();
        lvlChip = new javax.swing.JLabel();
        txtChip = new javax.swing.JTextField();
        lblRaza = new javax.swing.JLabel();
        txtRaza = new javax.swing.JTextField();
        lblFechaNacimiento = new javax.swing.JLabel();
        txtFechaNacimiento = new javax.swing.JTextField();
        lblFoto = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblHistorial = new javax.swing.JLabel();
        btnAltaMascota = new javax.swing.JButton();
        btnModificarMascota = new javax.swing.JButton();
        btnEliminarMascota = new javax.swing.JButton();
        btnConsulta = new javax.swing.JButton();
        lblSinMascotas = new javax.swing.JLabel();
        btnCargarFoto = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(850, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        lblCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCliente.setText("Cliente");

        lblMascota.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblMascota.setText("Mascota");

        lblDni.setText("DNI Cliente:");

        txtDni.setText("32821470X");
        txtDni.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDniFocusLost(evt);
            }
        });
        txtDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDniKeyTyped(evt);
            }
        });

        lblNombreCliente.setText("Nombre:");

        txtNombreCliente.setText("Alejandro");
        txtNombreCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreClienteKeyTyped(evt);
            }
        });

        lblApellidos.setText("Apellidos:");

        txtApellidos.setText("Piñero Rumbo");
        txtApellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidosKeyTyped(evt);
            }
        });

        lblTfno.setText("Tfno:");

        txtTelefono.setText("619313131");
        txtTelefono.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTelefonoFocusLost(evt);
            }
        });
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });

        lblEmail.setText("Email:");

        txtEmail.setText("alex.pinero.rumbo@gmail.com");
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });
        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmailKeyTyped(evt);
            }
        });

        lblDireccion.setText("Dirección:");

        txtDireccion.setText("Av. Oza 88 2º IZQ");
        txtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDireccionKeyTyped(evt);
            }
        });

        tablaMascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Chip", "Nombre", "Especie", "Raza"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablaMascotas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMascotasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaMascotas);

        taHistorial.setColumns(20);
        taHistorial.setRows(5);
        jScrollPane2.setViewportView(taHistorial);

        btnAltaCliente.setText("Alta");
        btnAltaCliente.setPreferredSize(new java.awt.Dimension(75, 23));
        btnAltaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAltaClienteActionPerformed(evt);
            }
        });

        btnModificarCliente.setText("Modificar");
        btnModificarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarClienteActionPerformed(evt);
            }
        });

        btnEliminarCliente.setText("Eliminar");
        btnEliminarCliente.setPreferredSize(new java.awt.Dimension(75, 23));
        btnEliminarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarClienteActionPerformed(evt);
            }
        });

        lblMascotasCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblMascotasCliente.setText("Mascotas del Cliente:");

        lblNombreMascota.setText("Nombre:");

        txtNombreMascota.setText("Pancho");

        lblEspecie.setText("Especie:");

        txtEspecie.setText("Perro");

        lvlChip.setText("NºChip:");

        txtChip.setText("666");

        lblRaza.setText("Raza:");

        txtRaza.setText("Palleiro");

        lblFechaNacimiento.setText("Fecha de nacimiento:");

        txtFechaNacimiento.setText("16/06/2025");

        lblFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cachorro.png"))); // NOI18N
        lblFoto.setToolTipText("");
        lblFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblFoto.setMaximumSize(new java.awt.Dimension(92, 133));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblHistorial.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblHistorial.setText("Historial Clínico:");

        btnAltaMascota.setText("Alta");
        btnAltaMascota.setPreferredSize(new java.awt.Dimension(75, 23));
        btnAltaMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAltaMascotaActionPerformed(evt);
            }
        });

        btnModificarMascota.setText("Modificar");

        btnEliminarMascota.setText("Eliminar");
        btnEliminarMascota.setPreferredSize(new java.awt.Dimension(75, 23));

        btnConsulta.setText("Abrir nueva Consulta");

        lblSinMascotas.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        lblSinMascotas.setForeground(new java.awt.Color(255, 0, 51));
        lblSinMascotas.setText("- Actualmente sin mascotas dadas de alta -");

        btnCargarFoto.setText("Cargar Foto");
        btnCargarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarFotoActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCliente)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDireccion)
                            .addComponent(lblEmail))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAltaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnModificarCliente)
                                .addGap(18, 18, 18)
                                .addComponent(btnEliminarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                                .addComponent(txtDireccion))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDni)
                            .addComponent(lblNombreCliente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblApellidos)
                            .addComponent(lblTfno))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblMascotasCliente)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSinMascotas, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(8, 8, 8))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblHistorial)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnConsulta)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(lblEspecie)
                                                    .addGap(7, 7, 7)
                                                    .addComponent(txtEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(lvlChip)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtChip, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(lblRaza)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtRaza))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(lblNombreMascota)
                                                    .addGap(7, 7, 7)
                                                    .addComponent(txtNombreMascota, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblFechaNacimiento)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txtFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(btnAltaMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnModificarMascota)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnEliminarMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(lblMascota))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnCargarFoto)))
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCliente)
                            .addComponent(lblMascota))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(lblDni)
                                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTfno)
                                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblApellidos)
                                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNombreCliente)
                                    .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblEmail)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDireccion)
                                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(lvlChip)
                                    .addComponent(txtChip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNombreMascota)
                                    .addComponent(txtNombreMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblEspecie)
                                    .addComponent(txtEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRaza)
                                    .addComponent(txtRaza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblFechaNacimiento)
                                    .addComponent(txtFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCargarFoto)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(btnAltaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnModificarCliente)
                                    .addComponent(btnEliminarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(btnAltaMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnModificarMascota)
                                    .addComponent(btnEliminarMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMascotasCliente)
                            .addComponent(lblSinMascotas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHistorial, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnConsulta, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaMascotasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMascotasMouseClicked
        if (tablaMascotas.getSelectedRow() != -1) {  // Si hay seleccionada alguna fila
            rellenarCamposMascota(mascotas.get(tablaMascotas.getSelectedRow()));
        }
    }//GEN-LAST:event_tablaMascotasMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        ventanaAnterior.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void btnAltaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAltaClienteActionPerformed
        if (txtDni.getText().isBlank()) return;
        if (!camposVacios(txtTelefono, txtNombreCliente, txtApellidos, txtDireccion, txtEmail)) {
            try {
                clienteDAO.alta(new Cliente(0, txtDni.getText().trim(), txtNombreCliente.getText().trim(), txtApellidos.getText().trim(),
                        txtTelefono.getText().trim(), txtEmail.getText().trim(), txtDireccion.getText().trim()));
                JOptionPane.showMessageDialog(this, i.texto("cm.cliente.alta.ok"));
            } catch (ConnectException ex) {
                JOptionPane.showMessageDialog(this, i.texto("error.conexion.mensaje"), i.texto("error.conexion.titulo"),
                        JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, i.texto("error.cliente.existe"));
            }
        }
    }//GEN-LAST:event_btnAltaClienteActionPerformed

    private void txtDniFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDniFocusLost
        validarCampo("Dni", txtDni);
        try {
            rellenarCamposCliente(clienteDAO.buscarPorDni(txtDni.getText()));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, i.texto("error.conexion.mensaje"), i.texto("error.conexion.titulo"),
                        JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtDniFocusLost

    private void txtDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDniKeyTyped
        txtDni.setBackground(Color.WHITE);
        vaciarCampos();    
    }//GEN-LAST:event_txtDniKeyTyped

    private void txtTelefonoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelefonoFocusLost
        validarCampo("Telefono", txtTelefono);
    }//GEN-LAST:event_txtTelefonoFocusLost
    
    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        txtTelefono.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtTelefonoKeyTyped

    private void txtNombreClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreClienteKeyTyped
        txtNombreCliente.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtNombreClienteKeyTyped

    private void txtApellidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidosKeyTyped
        txtApellidos.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtApellidosKeyTyped

    private void txtEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyTyped
        txtEmail.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtEmailKeyTyped

    private void txtDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDireccionKeyTyped
        txtDireccion.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtDireccionKeyTyped

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        validarCampo("Email",txtEmail);
    }//GEN-LAST:event_txtEmailFocusLost

    private void btnModificarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarClienteActionPerformed
        if (txtDni.getText().isBlank()) {
            return;
        }
        if (!camposVacios(txtNombreCliente, txtApellidos, txtTelefono, txtDireccion, txtEmail)) {
            try {
                Cliente cli = clienteDAO.buscarPorDni(txtDni.getText().trim());
                if (cli == null) {
                    JOptionPane.showMessageDialog(this, i.texto("error.cliente.noexiste"));
                    return;
                }        
                    clienteDAO.modificar(cli.getIdCliente(), new Cliente(0, txtDni.getText().trim(), txtNombreCliente.getText().trim(),
                            txtApellidos.getText(), txtTelefono.getText().trim(), txtEmail.getText().trim(), txtDireccion.getText().trim()));
                    JOptionPane.showMessageDialog(this, i.texto("cm.cliente.modificacion.ok"));
                
            } catch (ConnectException ex) {
                JOptionPane.showMessageDialog(this, i.texto("error.conexion.mensaje"), i.texto("error.conexion.titulo"),
                        JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex); // Para otros posibles errores 
            }
        }
    }//GEN-LAST:event_btnModificarClienteActionPerformed

    private void btnEliminarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarClienteActionPerformed
        if (txtDni.getText().isBlank()) return;

        try {
            Cliente cli = clienteDAO.buscarPorDni(txtDni.getText());
            if (cli == null) {
                    JOptionPane.showMessageDialog(this, i.texto("error.cliente.noexiste"));
                    return;
                }
            int confirmar = JOptionPane.showConfirmDialog(this, i.texto("cm.cliente.borrado.confirmacion"), i.texto("mensaje.confirmacion"), 
                                                            JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);
            if (confirmar == JOptionPane.YES_OPTION) {
                clienteDAO.borrar(cli.getIdCliente());
                JOptionPane.showMessageDialog(this, i.texto("cm.cliente.borrado.ok"));
                vaciarCampos();
                txtDni.setText("");
            }
        } catch (ConnectException ex) {
            JOptionPane.showMessageDialog(this, i.texto("error.conexion.mensaje"), i.texto("error.conexion.titulo"),
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex); // Para otros posibles errores 
        }
    }//GEN-LAST:event_btnEliminarClienteActionPerformed

    private void btnCargarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarFotoActionPerformed
        //new JFileChooser();
    }//GEN-LAST:event_btnCargarFotoActionPerformed

    private void btnAltaMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAltaMascotaActionPerformed
        if (txtDni.getText().isBlank()) {
            return;
        }
        if (!camposVacios(txtChip, txtNombreMascota, txtEspecie)) {
            try {
                Cliente dueno = clienteDAO.buscarPorDni(txtDni.getText().trim());
                if (dueno == null) {
                    JOptionPane.showMessageDialog(this, i.texto("error.cliente.noexiste"));
                    return;
                }
                mascotaDAO.alta(new Mascota(0, txtChip.getText().trim(), txtNombreMascota.getText().trim(), txtEspecie.getText().trim(),
                        txtRaza.getText().trim(), Date.from(Instant.now()), dueno.getIdCliente(), "foto"));
                JOptionPane.showMessageDialog(this, i.texto("cm.mascota.alta.ok"));
                rellenarTablaMascotas(dueno.getIdCliente());
            } catch (ConnectException ex) {
                JOptionPane.showMessageDialog(this, i.texto("error.conexion.mensaje"), i.texto("error.conexion.titulo"),
                        JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                System.out.println(ex);
                //JOptionPane.showMessageDialog(this, i.texto("error.mascota.existe"));
            }
        }  
    }//GEN-LAST:event_btnAltaMascotaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAltaCliente;
    private javax.swing.JButton btnAltaMascota;
    private javax.swing.JButton btnCargarFoto;
    private javax.swing.JButton btnConsulta;
    private javax.swing.JButton btnEliminarCliente;
    private javax.swing.JButton btnEliminarMascota;
    private javax.swing.JButton btnModificarCliente;
    private javax.swing.JButton btnModificarMascota;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblApellidos;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblDni;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEspecie;
    private javax.swing.JLabel lblFechaNacimiento;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JLabel lblHistorial;
    private javax.swing.JLabel lblMascota;
    private javax.swing.JLabel lblMascotasCliente;
    private javax.swing.JLabel lblNombreCliente;
    private javax.swing.JLabel lblNombreMascota;
    private javax.swing.JLabel lblRaza;
    private javax.swing.JLabel lblSinMascotas;
    private javax.swing.JLabel lblTfno;
    private javax.swing.JLabel lvlChip;
    private javax.swing.JTextArea taHistorial;
    private javax.swing.JTable tablaMascotas;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtChip;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEspecie;
    private javax.swing.JTextField txtFechaNacimiento;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtNombreMascota;
    private javax.swing.JTextField txtRaza;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    private void rellenarCamposMascota(Mascota mascota) {
        txtNombreMascota.setText(mascota.getNombre());
        txtEspecie.setText(mascota.getEspecie());
        txtRaza.setText(mascota.getRaza());
        txtFechaNacimiento.setText(mascota.getFechaNacimiento().toInstant().toString().substring(0, 10));
        lblFoto.setText(mascota.getFoto());     
    }

    private void rellenarCamposCliente(Cliente cliente) {
        if (cliente != null) {
            txtDni.setText(cliente.getDni());
            txtNombreCliente.setText(cliente.getNombre());
            txtApellidos.setText(cliente.getApellidos());
            txtTelefono.setText(cliente.getTelefono());
            txtDireccion.setText(cliente.getDireccion());
            txtEmail.setText(cliente.getMail());
            rellenarTablaMascotas(cliente.getIdCliente());
        }
    }

    private void rellenarTablaMascotas(int idCliente) {
        modeloTabla.setRowCount(0);
        mascotas = mascotaDAO.buscarPorDueno(idCliente);
        lblSinMascotas.setVisible(mascotas.isEmpty());
        for (Mascota m : mascotas) {
            modeloTabla.addRow(new Object[]{
                m.getIdMascota(),
                m.getNombre(),
                m.getEspecie(),
                m.getRaza()
            });
        }
    }

    private void cargarTextos(String idioma) {
        Idioma i = new Idioma(idioma);
        
        lblCliente.setText(i.texto("cm.cliente"));
        lblDni.setText(i.texto("cm.dni"));
        lblTfno.setText(i.texto("cm.tfno"));
        lblNombreCliente.setText(i.texto("cm.nombre") + ":");
        lblApellidos.setText(i.texto("cm.apellidos"));
        lblEmail.setText(i.texto("cm.email"));
        lblDireccion.setText(i.texto("cm.direccion"));
        lblMascotasCliente.setText(i.texto("cm.mascotas_cliente"));
        lblSinMascotas.setText(i.texto("cm.sinmascotas"));
        //Para las cabeceras de la tabla
        JTableHeader cabecera = tablaMascotas.getTableHeader();
        TableColumnModel columnas = cabecera.getColumnModel();
        columnas.getColumn(0).setHeaderValue(i.texto("cm.chip"));
        columnas.getColumn(1).setHeaderValue(i.texto("cm.nombre"));
        columnas.getColumn(2).setHeaderValue(i.texto("cm.especie"));
        columnas.getColumn(3).setHeaderValue(i.texto("cm.raza"));
               
    }
     
    private boolean camposVacios(JTextField... campos) { // Uso esta nomenclatura para reutilizar el método con número de campos variable
        boolean focoPuesto = false;
        boolean vacios = false;
        
        for (JTextField campo : campos) {           
            if (campo.getText().isBlank()){
                campo.setBackground(Color.PINK);
                if (!focoPuesto) {
                    campo.requestFocus();
                    focoPuesto = true;
                }
                vacios = true;
            } 
        }
        if (vacios) JOptionPane.showMessageDialog(this, i.texto("error.camposvacios"));
        return vacios;
    }
    
    private void validarCampo(String nombreCampo, JTextField campo){
        if (!campo.getText().isBlank()) {
            boolean valido = true;
            String valor = campo.getText().trim();
            switch (nombreCampo) {
                case "Dni": 
                    valido = valor.matches("^[0-9]{8}[a-zA-Z]$");
//                    if (valido) {                                                   // DESHABILITADO PARA FACILITAR LAS PRUEBAS !!!!!!!!!
//                        String letras = "TRWAGMYFPDXBNJZSQVHLCKE";
//                        int numero = Integer.parseInt(valor.substring(0, 8));
//                        valido = (valor.toUpperCase().charAt(8) == letras.charAt(numero % 23));
//                    } 
                    break;
                case "Telefono":
                    valido = valor.matches("[0-9]{9}");
                    break;
                case "Email":
                    valido = valor.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$");
                    break;
                default:
                    valido = true;
            }
            if (!valido){
                JOptionPane.showMessageDialog(this, i.texto("error.formato") + " " + nombreCampo);
                campo.requestFocus();
                campo.setBackground(Color.PINK);
            }
        }
    }

    private void vaciarCampos() {
        lblSinMascotas.setVisible(false);
        modeloTabla.setRowCount(0);
        taHistorial.setText("");
        lblFoto.setIcon(null);
        for (Component c : this.getContentPane().getComponents()) {
            if (c instanceof JTextField ) {
                JTextField campo = (JTextField) c;
                if (!campo.equals(txtDni)) {
                    campo.setText("");
                    campo.setBackground(Color.WHITE);
                }
            }
        }
    }



}
